const { buildSchema } = require('graphql')

module.exports = buildSchema(`

  # Product
  enum NutritiveEnum {
    protein
    carbs
    lipid
  }

  type Nutritive {
    nutritive: NutritiveEnum!
    weight: Int!
  }

  type Product {
    _id: ID!
    name: String!
    nutritives: [Nutritive!]!
    calories: Int!
  }

  input ProductInput {
    name: String!
    nutritives: [NutritiveInput!]!
    calories: Int
  }

  input NutritiveInput {
    nutritive: NutritiveEnum!
    weight: Int!
  }

  # Meal
  type WeighedProduct {
    weight: Int!
    product: ID!
  }

  type Meal {
    _id: ID!
    name: String!
    weighedProducts: [WeighedProduct!]!
  }

  input MealInput {
    name: String
    weighedProducts: [WeighedProductsInput!]!
  }

  input WeighedProductsInput {
    weight: Int!
    product: ID!
  }

  # Calendar
  type MealCalendar {
    _id: ID!
    datedMeals: [DatedMeal]
  }

  type DatedMeal {
    _id: ID!
    timestamp: String!
    meal: ID!
  }

  input DatedMealInput {
    timestamp: String!
    meal: ID!
  }

  # Query and Mutation
  type RootQuery {
    products: [Product!]
    meals: [Meal!]!
    datedMeals: [DatedMeal!]!
    singleMeal(mealId: ID!): Meal!
  }

  type RootMutation {
    createProduct(productInput: ProductInput): Product
    createMeal(mealInput: MealInput): Meal
    createDatedMeal(datedMealInput: DatedMealInput): DatedMeal
  }

  schema {
    query: RootQuery
    mutation: RootMutation
  }
`)